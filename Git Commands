***
Git Instructions:
***

Create a new project:
  rails new <repo_name> -T
  ---
  Sign into your GitHub account.
  Create a new repo named <repo_name>
  ---
  Go back to git and do the following:
  git init
  git add .
  git commit -m 'First commit and README update'
  git remote add origin git@github.com:<user name>/<repo_name>.git
  git push -u origin master
    # Note: If you don't use the above command,
    # the `git push` commands later will not work.

Before Each New Checkpoint:
  git status
  git checkout -b <new_branch_name>

To push a commit (backup your work) before the end of the checkpoint:
  git status
  git add .
  git status
  git commit -m "Notes on project"
  git push origin <branch_name>
  ** Now you resume working as you were before **

After Each New Checkpoint:
  git status
  git add .
  git status
  git commit -m "Notes on project"
  git push origin <branch_name>
  git checkout master
  git merge <branch_name>
  git push

Before Each Assignment:
  git status
  git checkout -b <new_branch_name>

After Each Assignment:
  git status
  git add .
  git status
  git commit -m "Assignment notes"
  git push origin <branch_name>
  git checkout master

Add a single file to the repo:
  git add <directory and file name>
  # ex: git add app/controllers/test_file.rb

Remove a file from the commit:
  git rm <filename>
  # ex: git rm app/controllers/test_file.rb

Remove a file from the commit even if changes have been made:
  git rm -f <filename>
  # ex: git rm -f log/test.log

Create an alias to speed up work
  git config --global alias.<alias word> <Git action word>
  ex: git config --global alias.co checkout
  # makes "git co" mean the same thing as "git checkout"

Clone an existing Github project:
    Command Prompt:
      Navigate to Rails folder
  --
    Web Browser:
      Go to github.com
      copy the SSH link from repo.
      Navigate to it and select "SSH clone URL"
      Copy this to your clipboard.
  --
    Command Prompt:
      Enter the following into the command prompt:
      git clone <text-from-clipboard>

How to clone a specific branch in git
  git clone -b <branch> <SSH link from repo>
  ex: git clone -b develop git@github.com:user/myproject.git

Edit a commit message:
  git checkout <branch_with_commit_message_to_be_edited>
  If commit has not been pushed to Github
    git commit --amend -m "New commit message"
  --
  If commit has been pushed to Github
    git commit --amend - "New commit message"
    git push <remote> <branch> --force
      Warning: force-pushing will overwrite the remote branch.

Move between branches:
  git checkout <branch_name>

Rename local branch
  git branch -m <oldname> <newname>

If working from wrong branch:
  git stash
  git checkout <branch_name>
  git stash apply

Delete Branch:
  git branch -D <branch_name>

Revert file to state of last commit:
  git checkout -- <file location and name i.e. db/schema.rb>

List all branches:
  git branch

List all branches with commits:
  git show-branch

Add Version numbers:
  git tag <version number> <commit id>

Have Git autocomplete branch names on a Mac:
  Copy file below to ~/ directory.
    https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
  Add following line to ~/.bashrc file:
    source ~/.git-completion.bash
  Find the .bash_profile file and add:
    if [ -s ~/.bashrc ]; then source ~/.bashrc; fi
  # Instant Happiness if you use long descriptive branch names
  # Thanks to Jack Schuss for this one.

***
Heroku Instructions:
***

Update to Heroku:
  git push heroku master

If problems in Heroku:
  heroku run rake db:migrate

Push a branch to test
  git push heroku yourbranch:master

Go back to master after testing branch:
  git push -f heroku master
  # Solves Fast-forward error

Check logs:
  heroku logs
  # Install PaperTrail. It is a whole lot more helpful
  # https://elements.heroku.com/addons/papertrail

Check last x number of logs:
  heroku logs -n <number>
  ex: heroku logs -n 200

Check logs for a certain source or dyno:
  heroku logs --source <app>

Clear the logs:
  heroku drains

***
Console Instructions:
***

Reload the console after any change is made:
  reload!

***
Database Instructions: ** Rails V.4 & Earlier **
***

Reset Database with seeds
  rake db:reset

Rollback database to previous state:
  rake db:rollback

Completely Empty the Database
  rake db:purge
  # Useful when redoing a branch and you've already made DB changes

***
Database Instructions: ** Rails V.5 **
***

Reset Database with seeds
  rails db:reset

Rollback database to previous state:
  rails db:rollback

Completely Empty the Database
  rails db:purge
  # Useful when redoing a branch and you've already made DB changes

***
Rails Commands: *Note: Must be in project folder.*
***

Start Rails Server:
  rails S

Start Rails Console
  rails c

Listing RVM installed rubies:
  rvm list
  # Good to help diagnose strange problems like the computer saying RAILS isn't installed.
